{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","financialData","setFinancialData","startDate","setStartDate","endDate","setEndDate","totalVolumes","setTotalVolumes","maxVolume","setMaxVolume","maxPrice","setMaxPrice","minPrice","setMinPrice","downwardSpan","setDownwardSpan","maxPriceDate","setMaxPriceDate","minPriceDate","setMinPriceDate","maxVolumeDate","setMaxVolumeDate","canTrade","setCanTrade","showTrade","setShowTrade","dataLoaded","setDataLoaded","handleSubmit","e","fetchData","a","axios","get","resp","console","log","data","filterEntries","prices","total_volumes","error","preventDefault","list","uniqueDays","uniqueEntries","forEach","item","index","dateDate","Date","toDateString","indexOf","push","convertDate","date","parseInt","getTime","toFixed","convertToISO","stampDate","toLocaleDateString","findLongestDownward","map","n_max","n_current","i","length","findMaxVolume","dates","volumes","maximumVolume","Math","max","maxVolumeIndex","maximumVolumeDate","ifOnlyDownward","handleFindSell","findMaxPrice","findMinPrice","maximumPrice","maxPriceIndex","maximumPriceDate","minimumPrice","min","minPriceIndex","minimumPriceDate","className","onSubmit","handleSubmitAndFilter","type","placeholder","onInput","target","value","handleSetStart","newEndDate","handleSetEnd","style","color","fontWeight","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.99158f4c.chunk.js","sourcesContent":["import \"./App.css\";\nimport { useState, useEffect } from \"react\";\nimport axios from \"axios\";\n\nfunction App() {\n  const [financialData, setFinancialData] = useState([]);\n  const [startDate, setStartDate] = useState(\"\");\n  const [endDate, setEndDate] = useState(\"\");\n  const [totalVolumes, setTotalVolumes] = useState([]);\n  const [maxVolume, setMaxVolume] = useState(\"\");\n  const [maxPrice, setMaxPrice] = useState(\"\");\n  const [minPrice, setMinPrice] = useState(\"\");\n  const [downwardSpan, setDownwardSpan] = useState(\"\");\n  const [maxPriceDate, setMaxPriceDate] = useState(\"\");\n  const [minPriceDate, setMinPriceDate] = useState(\"\");\n  const [maxVolumeDate, setMaxVolumeDate] = useState(\"\");\n  const [canTrade, setCanTrade] = useState(true);\n  const [showTrade, setShowTrade] = useState(false);\n  const [dataLoaded, setDataLoaded] = useState(false);\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    async function fetchData() {\n      try {\n        const resp = await axios.get(\n          `https://api.coingecko.com/api/v3/coins/bitcoin/market_chart/range?vs_currency=eur&from=${startDate}&to=${endDate}`\n        );\n        console.log(resp.data);\n\n        setFinancialData(filterEntries(resp.data.prices));\n        setTotalVolumes(filterEntries(resp.data.total_volumes));\n        console.log(\"DATA\", financialData);\n        console.log(\"VOLUMES\", totalVolumes);\n      } catch (err) {\n        // Handle Error Here\n        console.error(err);\n      }\n    }\n    fetchData();\n  };\n\n  const filterEntries = (list) => {\n    const uniqueDays = [];\n    const uniqueEntries = [];\n    console.log(\"LIST TO FILTER:\", list);\n    list.forEach(function (item, index) {\n      const dateDate = new Date(item[0]).toDateString();\n\n      if (uniqueDays.indexOf(dateDate) < 0) {\n        uniqueDays.push(dateDate);\n        uniqueEntries.push(item);\n      }\n    });\n\n    console.log(\"UNIQUE ENTRIES\", uniqueEntries);\n    return uniqueEntries;\n  };\n\n  const handleSubmitAndFilter = (e) => {\n    setDataLoaded(true);\n    setMaxVolume(\"\");\n    setShowTrade(false);\n    setDownwardSpan(\"\");\n    handleSubmit(e);\n  };\n  const convertDate = (date) => {\n    const stamp = parseInt((new Date(date).getTime() / 1000).toFixed(0));\n    return stamp;\n  };\n\n  const convertToISO = (stampDate) => {\n    const jsDate = new Date(stampDate).toLocaleDateString(\"ru-RU\");\n    return jsDate;\n  };\n\n  const handleSetStart = (e) => {\n    setStartDate(\"\");\n    setStartDate(convertDate(e.target.value));\n  };\n  const handleSetEnd = (e) => {\n    setEndDate(\"\");\n    const newEndDate = convertDate(e.target.value) + 3600;\n    setEndDate(newEndDate);\n  };\n\n  //The maximum amount of days bitcoinâ€™s price was decreasing (dayspan)\n  const handleFindDownward = () => {\n    setShowTrade(false);\n    setMaxVolume(\"\");\n    findLongestDownward();\n  };\n\n  const findLongestDownward = () => {\n    const prices = financialData.map((item) => item[1]);\n    let n_max = 0;\n    let n_current = 0;\n    for (let i = 0; i < prices.length; i++) {\n      while (prices[i] > prices[i + 1]) {\n        ++n_current;\n        i++;\n      }\n\n      if (n_current > n_max) {\n        n_max = n_current;\n        n_current = 0;\n      }\n    }\n    setDownwardSpan(n_max);\n    console.log(\"DOWN\", downwardSpan);\n  };\n\n  //The date with the highest trading volume and the volume (max total volume and corresponding date)\n  const handleFindVolume = () => {\n    setDownwardSpan(\"\");\n    setShowTrade(false);\n    findMaxVolume();\n    console.log(maxVolumeDate);\n    console.log(convertToISO(maxVolumeDate));\n  };\n\n  const findMaxVolume = () => {\n    const dates = totalVolumes.map((item) => item[0]);\n    const volumes = totalVolumes.map((item) => item[1]);\n    let maximumVolume = Math.max(...volumes);\n    const maxVolumeIndex = volumes.indexOf(maximumVolume);\n    setMaxVolume(maximumVolume);\n    let maximumVolumeDate = dates[maxVolumeIndex];\n    setMaxVolumeDate(maximumVolumeDate);\n    console.log(\"MAX VOLUME AND DATE\", maxVolume, maxVolumeDate);\n  };\n\n  const handleShouldBuyOrSell = () => {\n    setShowTrade(true);\n    const impossible = ifOnlyDownward();\n    if (impossible) {\n      setCanTrade(false);\n    } else {\n      setCanTrade(true);\n      handleFindSell();\n    }\n  };\n\n  const ifOnlyDownward = () => {\n    setCanTrade(true);\n    const prices = financialData.map((item) => item[1]);\n    let n_current = 0;\n\n    for (let i = 0; i < prices.length; i++) {\n      if (prices[i] < prices[i + 1]) {\n        n_current++;\n        i++;\n      }\n    }\n    if (n_current === 0) {\n      setCanTrade(false);\n      return true;\n    } else if (n_current > 0) {\n    }\n  };\n\n  //A pair of days: The day to buy and the day to sell (max price sell, min price buy)\n  const handleFindSell = () => {\n    setMaxVolume(\"\");\n    setDownwardSpan(\"\");\n    findMaxPrice();\n    findMinPrice();\n  };\n\n  const findMaxPrice = () => {\n    const dates = financialData.map((item) => item[0]);\n    const prices = financialData.map((item) => item[1]);\n    let maximumPrice = Math.max(...prices);\n    const maxPriceIndex = prices.indexOf(maximumPrice);\n    setMaxPrice(maximumPrice);\n    let maximumPriceDate = dates[maxPriceIndex];\n    setMaxPriceDate(maximumPriceDate);\n    console.log(\"MAX SELL\", maxPriceDate, maxPrice);\n  };\n\n  const handleFindBuy = () => {\n    findMinPrice();\n  };\n\n  const findMinPrice = () => {\n    let dates = financialData.map((item) => item[0]);\n    const prices = financialData.map((item) => item[1]);\n    let minimumPrice = Math.min(...prices);\n    const minPriceIndex = prices.indexOf(minimumPrice);\n    setMinPrice(minimumPrice);\n    let minimumPriceDate = dates[minPriceIndex];\n    setMinPriceDate(minimumPriceDate);\n    console.log(\"MIN BUY\", minPriceDate, minPrice);\n  };\n\n  //If the price only decreases in the date range, warn to not buy and not sell\n\n  return (\n    <div className=\"App\">\n      <div className=\"appParagraph\">\n        <p>Set the date range</p>\n        <form onSubmit={(e) => handleSubmitAndFilter(e)}>\n          <input\n            className=\"formItem\"\n            type=\"date\"\n            placeholder=\"From\"\n            onInput={(e) => handleSetStart(e)}\n          />\n          <input\n            className=\"formItem\"\n            type=\"date\"\n            placeholder=\"To\"\n            onInput={(e) => handleSetEnd(e)}\n          />\n          <button className=\"formItem\" type=\"submit\">\n            Submit\n          </button>\n        </form>\n      </div>\n      {/* <p>{startDate}</p>\n\n      <p>{endDate}</p>\n\n      <p>{financialData?.length}</p> */}\n      <div className=\"appParagraph\">\n        {dataLoaded && (\n          <p style={{ color: \"green\", fontWeight: \"700\" }}>\n            {\" \"}\n            The data has loaded, choose what you want to know\n          </p>\n        )}\n        <button\n          className=\"infoButton\"\n          onClick={() => {\n            handleFindDownward();\n          }}\n        >\n          Longest downward{\" \"}\n        </button>\n        <button\n          className=\"infoButton\"\n          onClick={() => {\n            handleShouldBuyOrSell();\n          }}\n        >\n          Sell or Buy\n        </button>\n\n        <button\n          className=\"infoButton\"\n          onClick={() => {\n            handleFindVolume();\n          }}\n        >\n          Higest trading volume\n        </button>\n      </div>\n\n      <div className=\"appParagraph\">\n        {maxVolume && (\n          <div>\n            <p>\n              Max volume: {maxVolume.toFixed(2)} euros on{\" \"}\n              {convertToISO(maxVolumeDate)}\n            </p>\n          </div>\n        )}\n\n        {showTrade &&\n          (canTrade ? (\n            <div>\n              {minPrice && <p>Should buy: on {convertToISO(minPriceDate)}</p>}\n              {maxPrice && <p>Should sell: on {convertToISO(maxPriceDate)}</p>}\n            </div>\n          ) : (\n            <p>Deals are not profitable: the price only decreases</p>\n          ))}\n        {downwardSpan && (\n          <div>\n            <p>Longest downward span: {downwardSpan} days in a row</p>\n          </div>\n        )}\n      </div>\n\n      {/* <div>\n        {financialData?.map((item) => (\n          <li key={item[0]}>\n            <p>Date: {convertToISO(item[0])}</p>\n            <p>Price: {item[1].toFixed(2)}</p>\n          </li>\n        ))}\n\n        {totalVolumes?.map((item) => (\n          <li key={item[0]}>\n            <p>Date: {convertToISO(item[0])}</p>\n            <p>Volume: {item[1].toFixed(2)}</p>\n          </li>\n        ))}\n      </div> */}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}